package presentacion;

import dtos.DiaDTO;
import dtos.EjercicioDTO;
import dtos.EjercicioDiarioDTO;
import dtos.RutinaDTO;
import dtos.UsuarioDTO;
import extras.Render;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import modificarEjercicioDiario.FModificarEjercicioDiario;
import modificarEjercicioDiario.IModificarEjercicioDiario;
import negocio.EjercicioDiarioBO;
import negocio.IEjercicioDiarioBO;
import negocio.IRutinaBO;
import negocio.IUsuarioBO;
import negocio.RutinaBO;
import negocio.UsuariosBO;
import obtenerRutinas.FObtenerRutinas;
import obtenerRutinas.IObtenerRutinas;
import obtenerUsuarios.FObtenerUsuarios;
import obtenerUsuarios.IObtenerUsuarios;

/**
 *
 * @author af_da
 */
public class Menu extends javax.swing.JFrame implements Observador {

    private IObtenerRutinas obtenerRutinas;
    private IObtenerUsuarios obtenerUsuario;
    private DefaultTableModel modeloTabla, modeloTablaResumen;
    private UsuarioDTO usuario;
    private String[] dias = {"TODOS", "LUNES", "MARTES", "MIERCOLES", "JUEVES", "VIERNES", "SABADO", "DOMINGO"};
    private List<RutinaDTO> rutinas;
    private Observable observable;
    private IModificarEjercicioDiario modificarEjercicioDiario;

    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
        iniciarComponentes();
    }

    private void iniciarComponentes() {
        obtenerRutinas = new FObtenerRutinas();
        obtenerUsuario = new FObtenerUsuarios();
        modificarEjercicioDiario = new FModificarEjercicioDiario();
        this.usuario = obtenerUsuario.obtenerUsuario(SeguimientoEjercicioPresentacion.USUARIO);
        this.rutinas = obtenerRutinas.obtenerRutinas(usuario);

        txtNombreUsuario.setText(usuario.nomUsuario());
        txtNombreUsuario.setEditable(false);

        llenarComboBoxDias();
        llenarTabla(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        btnAgregarEjercicio = new javax.swing.JButton();
        btnModificarEjercicio = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaEjercicios = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        cbxFiltroDias = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtNombreUsuario = new javax.swing.JTextField();
        btnEstadistica = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnRanking = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnAgregarEjercicio.setText("Agregar Ejercicio");
        btnAgregarEjercicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarEjercicioActionPerformed(evt);
            }
        });
        getContentPane().add(btnAgregarEjercicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 129, -1));

        btnModificarEjercicio.setText("Modificar Ejercicio");
        btnModificarEjercicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarEjercicioActionPerformed(evt);
            }
        });
        getContentPane().add(btnModificarEjercicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, -1));

        tablaEjercicios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Dia", "Ejercicio", "Tipo", "Tiempo", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaEjercicios);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 425, 288));

        jLabel1.setText("Filtrar por dia");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, -1, -1));

        getContentPane().add(cbxFiltroDias, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 129, -1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 340, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 0, 30, 340));

        jLabel3.setText("Bienvenido");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, -1, -1));

        txtNombreUsuario.setBackground(new java.awt.Color(204, 204, 204));
        txtNombreUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreUsuarioActionPerformed(evt);
            }
        });
        getContentPane().add(txtNombreUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 130, -1));

        btnEstadistica.setText("Estadísticas");
        btnEstadistica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEstadisticaActionPerformed(evt);
            }
        });
        getContentPane().add(btnEstadistica, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 130, 20));

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 130, -1));

        btnRanking.setText("Ranking");
        btnRanking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRankingActionPerformed(evt);
            }
        });
        getContentPane().add(btnRanking, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 130, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void llenarComboBoxDias() {
        for (String dia : dias) {
            cbxFiltroDias.addItem(dia);
        }

        cbxFiltroDias.addActionListener(evt -> {
            String diaSeleccionado = (String) cbxFiltroDias.getSelectedItem();
            if ("TODOS".equals(diaSeleccionado)) {
                llenarTabla(null);
            } else {
                llenarTabla(diaSeleccionado);
            }
        });
    }

    public void llenarTabla(String diaFiltro) {

        // volver a obtener las rutinas
        this.rutinas = obtenerRutinas.obtenerRutinas(usuario);
        // Establecer las columnas y las características de la tabla
        tablaEjercicios.setDefaultRenderer(Object.class, new Render());
        String[] columnas = {"Día", "Ejercicio", "Tipo", "Duración", "Estado"};
        boolean[] editable = {false, false, false, false, true};  // El estado puede ser editable si se requiere.
        Class[] tipos = new Class[]{java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class};

        // Crear el modelo de la tabla con columnas
        DefaultTableModel modeloTabla = new DefaultTableModel(columnas, 0) {
            public Class getColumnClass(int i) {
                return tipos[i];  // Definir los tipos de las columnas
            }

            public boolean isCellEditable(int row, int column) {
                return editable[column];  // Solo hacer editable la columna correspondiente
            }
        };
        limipiarTabla(tablaEjercicios, modeloTabla);

        // Limpiar la tabla
        // Recorrer las rutinas y aplicar el filtro por día
        for (RutinaDTO rutina : rutinas) {
            if (diaFiltro == null || rutina.dia().nombre().equals(diaFiltro)) {
                for (EjercicioDiarioDTO ejercicio : rutina.ejerciciosDiarios()) {
                    Object[] fila = new Object[]{
                        rutina.dia().nombre(),
                        ejercicio.ejercicio().nombre(),
                        ejercicio.ejercicio().tipo(),
                        ejercicio.ejercicio().duracion(),
                        ejercicio.completado()
                    };

                    // Añadir la fila al modelo de la tabla
                    modeloTabla.addRow(fila);
                }
            }
        }

        // Actualizar el modelo de la tabla en el JTable
        tablaEjercicios.setModel(modeloTabla);

        modeloTabla.addTableModelListener(e -> {
            int row = e.getFirstRow();
            int column = e.getColumn();
            if (column == 4) { // La columna de los checkboxes es la última (índice 4)
                String dia = (String) modeloTabla.getValueAt(row, 0);
                String ejercicioNombre = (String) modeloTabla.getValueAt(row, 1); // Nombre del ejercicio
                Boolean checked = (Boolean) modeloTabla.getValueAt(row, column);
                EjercicioDTO ejercicioDTO = new EjercicioDTO(null, ejercicioNombre, null, 0f);
                DiaDTO diaDTO = new DiaDTO(0l, dia);
                RutinaDTO rutinaDTO = new RutinaDTO(null, null, usuario, diaDTO);
                EjercicioDiarioDTO ejercicioDiarioDTO = new EjercicioDiarioDTO(null, ejercicioDTO, checked, rutinaDTO);
                modificarEjercicioDiario.actualizarEstadoEjercicio(ejercicioDiarioDTO);
                System.out.println("El checkbox del ejercicio '" + ejercicioNombre + "' en la fila " + row + " fue " + (checked ? "marcado" : "desmarcado"));
            }
        });
        // Notificar que los datos de la tabla han cambiado
//    modeloTabla.fireTableDataChanged();
    }

    private void limipiarTabla(JTable tabla, DefaultTableModel modeloTabla) {
        if (modeloTabla.getRowCount() > 0) {
            for (int i = 0; i < tabla.getRowCount(); i++) {
                modeloTabla.removeRow(i);
                i -= 1;
            }
        }
    }



    private void btnAgregarEjercicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarEjercicioActionPerformed
        RegistroEjercicio registroEjercicio = new RegistroEjercicio();
        registroEjercicio.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnAgregarEjercicioActionPerformed

    private void txtNombreUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreUsuarioActionPerformed

    private void btnModificarEjercicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarEjercicioActionPerformed
        // TODO add your handling code here:
        ModificarEjercicio me = new ModificarEjercicio();
        me.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnModificarEjercicioActionPerformed

    private void btnEstadisticaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEstadisticaActionPerformed
        EstadisticaSemanal estadistica = new EstadisticaSemanal();
        estadistica.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnEstadisticaActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        LoginUsuario login = new LoginUsuario();
        login.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnRankingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRankingActionPerformed
        RankingUsuarios ranking = new RankingUsuarios();
        ranking.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnRankingActionPerformed

    public List<RutinaDTO> getRutinas() {
        return rutinas;
    }
    
    public void actualizarRutinas(){
        this.rutinas = obtenerRutinas.obtenerRutinas(usuario);
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarEjercicio;
    private javax.swing.JButton btnEstadistica;
    private javax.swing.JButton btnModificarEjercicio;
    private javax.swing.JButton btnRanking;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> cbxFiltroDias;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tablaEjercicios;
    private javax.swing.JTextField txtNombreUsuario;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update() {
        // Limpiar los modelos de tabla antes de volver a llenarlos
        modeloTabla.setRowCount(0);
        modeloTablaResumen.setRowCount(0);

        // Volver a cargar los datos desde la base de datos
        this.rutinas = obtenerRutinas.obtenerRutinas(usuario);

        llenarTabla(null);
//        llenarTablaResumen();
        System.out.println("Se actualizo");
    }
}
